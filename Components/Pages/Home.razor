@page "/"
@using Plugin.Maui.Audio
@inject IAudioManager AudioManager
@inject MarkdownService MarkdownService

<div class="bg-black min-h-screen">
    <h1 class="pt-8 md:pt-10 text-center text-white text-3xl md:text-5xl font-serif">Russian Alphabet</h1>
    <h2 class="pt-6 md:pt-8 text-center text-white text-2xl md:text-5xl font-serif fst-italic"><i>@((MarkupString)_currentDescription)</i></h2>
    <div>
        <div class="grid grid-cols-5 landscape:grid-cols-9 gap-1 p-2">
            @foreach (var letter in _letters)
            {
                if ("Ю" == letter.ToUpper())
                {
                    <button @onclick="() => HandleLetterClick(letter.ToUpper())"
                            class="col-start-3 landscape:col-start-5 py-2 md:py-7 px-4 mt-4 bg-black text-white text-xl md:text-4xl active:font-bold font-serif">
                        @letter
                    </button> 
                }
                else if ("Я" == letter.ToUpper())
                {
                    <button @onclick="() => HandleLetterClick(letter.ToUpper())"
                            class="col-start-5 landscape:col-start-6 py-2 md:py-7 px-4 mt-4 bg-black text-white text-xl md:text-4xl hover:font-bold font-serif">
                        @letter
                    </button> 
                }
                else
                {
                    <button @onclick="() => HandleLetterClick(letter.ToUpper())"
                            class="alphabet py-2 md:py-7 px-4 mt-4 bg-black text-white text-xl md:text-4xl hover:font-bold font-serif">
                        @letter
                    </button> 
                }
            }
        </div>
        <div class="flex justify-center py-4 md:pt-2 se:hidden">
            <div class="border-2 border-white flex justify-center" >
                <button @onclick="() => _letters = _letters.Select(a => a.ToUpper()).ToList()" class="text-white md:text-2xl px-2 font-serif">
                    Uppercase
                </button>
                <div class="text-white md:text-2xl font-serif">
                    |
                </div>
                <button @onclick="() => _letters = _letters.Select(a => a.ToLower()).ToList()" class="text-white md:text-2xl px-2 font-serif">
                    Lowercase
                </button>   
            </div>
        </div>
    </div>
</div>

@code {

  private List<string> _letters = ["A", "Б", "В", "Г", "Д", "Е", "Ё", "Ж", "З", "И", "Й", "К", "Л", "М", "Н", "О", "П", "Р", "С", "Т", "У", "Ф", "Х", "Ц", "Ч", "Ш", "Щ", "Ъ", "Ы", "Ь", "Э", "Ю", "Я"];

  private string _currentDescription = "Tap a letter";
  
  private readonly Dictionary<string, string> _letterDescriptions = new ()
  {
      { "A", "f<u>**a**</u>ther" },
      { "Б", "<u>**b**</u>ad" },
      { "В", "<u>**v**</u>ine" },
      { "Г", "<u>**g**</u>o" },
      { "Д", "<u>**d**</u>o" },
      { "Е", "<u>**ye**</u>s" },
      { "Ё", "<u>**yo**</u>ur" },
      { "Ж", "mea<u>**s**</u>ure" },
      { "З", "**<u>z**</u>oo" },
      { "И", "pol<u>**i**</u>ce" },
      { "Й", "to<u>**y**</u>" },
      { "К", "<u>**k**</u>ept" },
      { "Л", "<u>**l**</u>amp" },
      { "М", "<u>**m**</u>ap" },
      { "Н", "<u>**n**</u>ot" },
      { "О", "m<u>**o**</u>re" },
      { "П", "<u>**p**</u>et" },
      { "Р", "rolled <u>**r**</u>" },
      { "С", "<u>**s**</u>et" },
      { "Т", "<u>**t**</u>op" },
      { "У", "t<u>**oo**</u>l" },
      { "Ф", "<u>**f**</u>ace" },
      { "Х", "u<u>**gh**</u>" },
      { "Ц", "si<u>**ts**</u>" },
      { "Ч", "<u>**ch**</u>eck" },
      { "Ш", "<u>**sh**</u>rimp" },
      { "Щ", "pu<u>**sh</u> <u>sh**</u>ips" },
      { "Ъ", "(hard sound)" },
      { "Ы", "ros<u>**e**</u>s (approximate)" },
      { "Ь", "(soft sound)" },
      { "Э", "m<u>**e**</u>t" },
      { "Ю", "<u>**u**</u>se" },
      { "Я", "<u>**ya**</u>rd" },
  };

  private readonly Dictionary<string, IAudioPlayer> _audioPlayerCache = new (); 
  
  private async Task PlayAudio(string letter)
  {
      if (_audioPlayerCache.TryGetValue(letter, out var value))
      {
          value.Play();
      }
      else
      {
          var file = await FileSystem.OpenAppPackageFileAsync($"wwwroot/sounds/{letter}.m4a");
          var audioPlayer = AudioManager.CreatePlayer(file);

          audioPlayer.Play(); 
          
          _audioPlayerCache.Add(letter, audioPlayer);
      }
  }

  private void SetDescription(string newDescription)
  {
      _currentDescription = MarkdownService.ConvertToHtml(_letterDescriptions.GetValueOrDefault(newDescription, "Error"));
  }

  private async Task HandleLetterClick(string letter)
  {
      SetDescription(letter);
      await PlayAudio(letter);
  }

}